
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter, DialogDescription } from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Form, FormField, FormItem, FormLabel, FormControl, FormMessage } from "@/components/ui/form";
import { useForm } from "react-hook-form";
import { EquipmentItem } from "./useInventoryItems";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { toast } from "@/hooks/use-toast";
import { useState, useEffect } from "react";

type AddEquipmentDialogProps = {
  open: boolean;
  onClose: () => void;
  onAdd: (item: Omit<EquipmentItem, "id">) => void;
};

// Generate automatic serial number for preview
const generateSerialNumber = () => {
  const prefix = "LAB";
  const timestamp = Date.now().toString().slice(-8);
  const random = Math.floor(Math.random() * 1000).toString().padStart(3, '0');
  return `${prefix}-${timestamp}-${random}`;
};

export function AddEquipmentDialog({ open, onClose, onAdd }: AddEquipmentDialogProps) {
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [previewSerialNumber, setPreviewSerialNumber] = useState("");
  
  const form = useForm({
    defaultValues: {
      name: "",
      status: "Available",
      location: "",
      type: "PCR Machine",
      serialNumber: "",
      lastMaintenance: "",
    }
  });

  // Generate preview serial number when dialog opens
  useEffect(() => {
    if (open) {
      setPreviewSerialNumber(generateSerialNumber());
    }
  }, [open]);

  const handleSubmit = (values: any) => {
    try {
      setIsSubmitting(true);
      
      // Add validation
      if (!values.name) {
        toast({
          title: "Error",
          description: "Equipment name is required",
          variant: "destructive",
        });
        setIsSubmitting(false);
        return;
      }
      
      if (!values.location) {
        toast({
          title: "Error",
          description: "Equipment location is required",
          variant: "destructive",
        });
        setIsSubmitting(false);
        return;
      }
      
      // Serial number will be auto-generated by the service
      onAdd({
        ...values,
        serialNumber: undefined, // Let the service generate it
      });
      form.reset();
      setIsSubmitting(false);
      onClose();
    } catch (error) {
      console.error("Error adding equipment:", error);
      toast({
        title: "Error",
        description: "Failed to add equipment. Please try again.",
        variant: "destructive",
      });
      setIsSubmitting(false);
    }
  };

  return (
    <Dialog open={open} onOpenChange={(isOpen) => {
      if (!isOpen) onClose();
      // Clear form on close
      if (!isOpen && !isSubmitting) {
        form.reset();
      }
    }}>
      <DialogContent className="sm:max-w-[500px]">
        <DialogHeader>
          <DialogTitle>Ajouter un équipement d'échantillon</DialogTitle>
          <DialogDescription>Ajouter des détails sur l'équipement d'échantillon ou la machine</DialogDescription>
        </DialogHeader>
        
        <Form {...form}>
          <form onSubmit={form.handleSubmit(handleSubmit)} className="space-y-4">
            <FormField
              control={form.control}
              name="name"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Equipment Name</FormLabel>
                  <FormControl>
                    <Input placeholder="PCR Machine #5" {...field} />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            
            <div className="grid grid-cols-2 gap-4">
              <FormField
                control={form.control}
                name="type"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Equipment Type</FormLabel>
                    <Select
                      onValueChange={field.onChange}
                      defaultValue={field.value}
                    >
                      <FormControl>
                        <SelectTrigger>
                          <SelectValue placeholder="Select type" />
                        </SelectTrigger>
                      </FormControl>
                      <SelectContent>
                        <SelectItem value="PCR Machine">PCR Machine</SelectItem>
                        <SelectItem value="Centrifuge">Centrifuge</SelectItem>
                        <SelectItem value="Microscope">Microscope</SelectItem>
                        <SelectItem value="Sequencer">Sequencer</SelectItem>
                        <SelectItem value="Spectrophotometer">Spectrophotometer</SelectItem>
                        <SelectItem value="Incubator">Incubator</SelectItem>
                        <SelectItem value="Other">Other Equipment</SelectItem>
                      </SelectContent>
                    </Select>
                    <FormMessage />
                  </FormItem>
                )}
              />
              
              <FormItem>
                <FormLabel>Serial Number</FormLabel>
                <FormControl>
                  <Input 
                    placeholder="Auto-generated" 
                    value={previewSerialNumber}
                    disabled
                    className="bg-muted"
                  />
                </FormControl>
                <p className="text-xs text-muted-foreground">Serial number will be generated automatically</p>
              </FormItem>
            </div>
            
            <FormField
              control={form.control}
              name="status"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Status</FormLabel>
                  <Select
                    onValueChange={field.onChange}
                    defaultValue={field.value}
                  >
                    <FormControl>
                      <SelectTrigger>
                        <SelectValue placeholder="Select status" />
                      </SelectTrigger>
                    </FormControl>
                    <SelectContent>
                      <SelectItem value="Available">Available</SelectItem>
                      <SelectItem value="In Use">In Use</SelectItem>
                      <SelectItem value="Maintenance">Maintenance</SelectItem>
                      <SelectItem value="Out of Order">Out of Order</SelectItem>
                    </SelectContent>
                  </Select>
                  <FormMessage />
                </FormItem>
              )}
            />
            
            <div className="grid grid-cols-2 gap-4">
              <FormField
                control={form.control}
                name="location"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Location</FormLabel>
                    <FormControl>
                      <Input placeholder="Lab A" {...field} />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              
              <FormField
                control={form.control}
                name="lastMaintenance"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Last Maintenance</FormLabel>
                    <FormControl>
                      <Input type="date" {...field} />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
            </div>
            
            <DialogFooter>
              <Button type="button" variant="outline" onClick={onClose} disabled={isSubmitting}>Cancel</Button>
              <Button type="submit" disabled={isSubmitting}>
                {isSubmitting ? "Adding..." : "Add Equipment"}
              </Button>
            </DialogFooter>
          </form>
        </Form>
      </DialogContent>
    </Dialog>
  );
}
